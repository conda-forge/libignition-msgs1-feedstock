From 1c92f23fbc9d869d916f5321cb7aca9007404639 Mon Sep 17 00:00:00 2001
From: Silvio <silvio.traversaro@iit.it>
Date: Fri, 25 Jul 2025 11:38:56 +0200
Subject: [PATCH] Fix compatibility with protobuf v30 (cpp 6.30.0)

Generated-by: GitHub Copilot Chat 0.29.1 with Agent Mode with Claude Sonnet 4
Signed-off-by: Silvio Traversaro <silvio@traversaro.it>
---
 src/Generator.cc | 44 +++++++++++++++++++++++++-------------------
 1 file changed, 25 insertions(+), 19 deletions(-)

diff --git a/src/Generator.cc b/src/Generator.cc
index 42658459..07a99003 100644
--- a/src/Generator.cc
+++ b/src/Generator.cc
@@ -33,6 +33,7 @@
 #include <algorithm>
 #include <iostream>
 #include <memory>
+#include <sstream>
 #include <string>
 #include <utility>
 #include <vector>
@@ -71,12 +72,12 @@ bool Generator::Generate(const FileDescriptor *_file,
                                OutputDirectory *_generatorContext,
                                std::string * /*_error*/) const
 {
-  std::string headerFilename = _file->name();
+  std::string headerFilename{_file->name()};
   std::string delim = ".proto";
   size_t pos = headerFilename.rfind(delim);
   headerFilename.replace(pos, delim.size(), ".pb.h");
 
-  std::string sourceFilename = _file->name();
+  std::string sourceFilename{_file->name()};
   pos = sourceFilename.rfind(delim);
   sourceFilename.replace(pos, delim.size(), ".pb.cc");
 
@@ -144,10 +145,12 @@ bool Generator::Generate(const FileDescriptor *_file,
     // Call the IGN_REGISTER_STATIC_MSG macro for each message
     for (auto i = 0; i < _file->message_type_count(); ++i)
     {
-      std::string factory = "IGN_REGISTER_STATIC_MSG(\"ign_msgs.";
-      factory += _file->message_type(i)->name() + "\", " +
-        _file->message_type(i)->name() +")\n";
-      printer.Print(factory.c_str(), "name", "includes");
+      std::stringstream factory;
+      factory << "IGN_REGISTER_STATIC_MSG(\"ign_msgs."
+              << _file->message_type(i)->name() << "\", "
+              << _file->message_type(i)->name() << ")\n";
+      std::string factoryStr = factory.str();
+      printer.Print(factoryStr.c_str(), "name", "includes");
     }
   }
 
@@ -161,26 +164,29 @@ bool Generator::Generate(const FileDescriptor *_file,
     for (auto i = 0; i < _file->message_type_count(); ++i)
     {
       // Define std::unique_ptr types for our messages
-      std::string ptrTypes = "typedef std::unique_ptr<"
-        + _file->message_type(i)->name() + "> "
-        + _file->message_type(i)->name() + "UniquePtr;\n";
+      std::stringstream ptrTypes;
+
+      ptrTypes << "typedef std::unique_ptr<"
+               << _file->message_type(i)->name() << "> "
+               << _file->message_type(i)->name() << "UniquePtr;\n";
 
       // Define const std::unique_ptr types for our messages
-      ptrTypes += "typedef std::unique_ptr<const "
-        + _file->message_type(i)->name() + "> Const"
-        + _file->message_type(i)->name() + "UniquePtr;\n";
+      ptrTypes << "typedef std::unique_ptr<const "
+               << _file->message_type(i)->name() << "> Const"
+               << _file->message_type(i)->name() << "UniquePtr;\n";
 
       // Define std::shared_ptr types for our messages
-      ptrTypes += "typedef std::shared_ptr<"
-        + _file->message_type(i)->name() + "> "
-        + _file->message_type(i)->name() + "SharedPtr;\n";
+      ptrTypes << "typedef std::shared_ptr<"
+               << _file->message_type(i)->name() << "> "
+               << _file->message_type(i)->name() << "SharedPtr;\n";
 
       // Define const std::shared_ptr types for our messages
-      ptrTypes += "typedef std::shared_ptr<const "
-        + _file->message_type(i)->name() + "> Const"
-        + _file->message_type(i)->name() + "SharedPtr;\n";
+      ptrTypes << "typedef std::shared_ptr<const "
+               << _file->message_type(i)->name() << "> Const"
+               << _file->message_type(i)->name() << "SharedPtr;\n";
 
-      printer.Print(ptrTypes.c_str(), "name", "namespace_scope");
+      std::string ptrTypesStr = ptrTypes.str();
+      printer.Print(ptrTypesStr.c_str(), "name", "namespace_scope");
     }
   }
 
